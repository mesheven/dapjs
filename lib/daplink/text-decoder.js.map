{"version":3,"sources":["daplink/text-decoder.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;EAqBE;;AAEF,+DAA+D;AAE/D,IAAM,iBAAiB,GAAG,2BAA2B,CAAC;AACtD,IAAM,mBAAmB,GAAG,0BAA0B,CAAC;AAEvD;IAAA;IAyDA,CAAC;IArDG;;;OAGG;IACI,4BAAM,GAAb,UAAc,KAAkB;QAE5B,IAAM,WAAW,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;QACtE,IAAI,IAAI,GAAG,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;QAE9D,IAAI,IAAI,CAAC,WAAW,EAAE;YAClB,6CAA6C;YAC7C,IAAI,GAAG,KAAG,IAAI,CAAC,WAAW,GAAG,IAAM,CAAC;YACpC,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;SAChC;QAED,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;QAC5C,IAAI,KAAK,EAAE;YACP,4EAA4E;YAC5E,IAAM,QAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;YAC/B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,QAAM,CAAC,CAAC;YACvC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,QAAM,CAAC,CAAC;SACjC;QAED,OAAO,IAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;IACnE,CAAC;IAEO,qCAAe,GAAvB,UAAwB,OAAe;QACnC,IAAI,SAAS,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC,CAAE,IAAI,EAAE,CAAC;QAC9C,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,CAAC;QAC3C,IAAI,MAAM,GAAG,CAAC,CAAC;QACf,IAAM,SAAS,GAAG,OAAO,CAAC,MAAM,CAAC;QACjC,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,IAAI,WAAW,GAAG,CAAC,IAAI,SAAS,IAAI,WAAW,EAAE;YAC7C,SAAS,GAAG,CAAC,SAAS,IAAI,WAAW,CAAC,KAAK,CAAC,EAAE,GAAG,WAAW,CAAC,CAAC;YAC9D,KAAK,MAAM,GAAG,CAAC,EAAE,MAAM,GAAG,WAAW,EAAE,MAAM,GAAG,MAAM,GAAG,CAAC,EAAE;gBACxD,SAAS,GAAG,CAAC,SAAS,IAAI,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,MAAM,CAAE,GAAG,IAAI,CAAC,CAAC;aACxE;YACD,IAAI,SAAS,IAAI,MAAM,EAAE,EAAE,iBAAiB;gBACxC,MAAM,IAAI,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;aAC7C;iBAAM,IAAI,SAAS,IAAI,QAAQ,EAAE;gBAC9B,wEAAwE;gBACxE,SAAS,GAAG,SAAS,GAAG,OAAO,CAAC;gBAChC,MAAM,IAAI,MAAM,CAAC,aAAa,CAC1B,CAAC,SAAS,IAAI,EAAE,CAAC,GAAG,MAAM,EAAG,gBAAgB;gBAC7C,CAAC,SAAS,GAAG,KAAK,CAAC,GAAG,MAAM,CAAC,eAAe;iBAC/C,CAAC;aACL;;gBAAM,MAAM,GAAG,CAAC,CAAC,CAAC,8BAA8B;SACpD;QACD,OAAO,MAAM,GAAG,SAAS,EAAE,MAAM,GAAG,MAAM,GAAG,CAAC,EAAE;YAC5C,MAAM,IAAI,QAAQ,CAAC,CAAC,wBAAwB;SAC/C;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IACL,kBAAC;AAAD,CAzDA,AAyDC,IAAA;AAzDY,kCAAW","file":"text-decoder.js","sourcesContent":["/*\n* DAPjs\n* Copyright Arm Limited 2020\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n// https://github.com/anonyco/FastestSmallestTextEncoderDecoder\n\nconst PARTIAL_CHAR_TEST = /[\\xc0-\\xff][\\x80-\\xbf]*$/g;\nconst DOUBLE_BYTE_REPLACE = /[\\xc0-\\xff][\\x80-\\xbf]*/g;\n\nexport class TextDecoder {\n\n    private partialChar: string | undefined;\n\n    /**\n     * Decode an ArrayBuffer to a string, handling double-byte characters\n     * @param input The ArrayBuffer to decode\n     */\n    public decode(input: ArrayBuffer): string {\n\n        const numberArray = Array.prototype.slice.call(new Uint8Array(input));\n        let data = String.fromCodePoint.apply(undefined, numberArray);\n\n        if (this.partialChar) {\n            // Previous double-byte character was cut off\n            data = `${this.partialChar}${data}`;\n            this.partialChar = undefined;\n        }\n\n        const match = data.match(PARTIAL_CHAR_TEST);\n        if (match) {\n            // Partial double-byte character at end of string, save it and truncate data\n            const length = match[0].length;\n            this.partialChar = data.slice(-length);\n            data = data.slice(0, -length);\n        }\n\n        return data.replace(DOUBLE_BYTE_REPLACE, this.decoderReplacer);\n    }\n\n    private decoderReplacer(encoded: string): string {\n        let codePoint = encoded.codePointAt(0)! << 24;\n        const leadingOnes = Math.clz32(~codePoint);\n        let endPos = 0;\n        const stringLen = encoded.length;\n        let result = \"\";\n        if (leadingOnes < 5 && stringLen >= leadingOnes) {\n            codePoint = (codePoint << leadingOnes) >>> (24 + leadingOnes);\n            for (endPos = 1; endPos < leadingOnes; endPos = endPos + 1) {\n                codePoint = (codePoint << 6) | (encoded.codePointAt(endPos)! & 0x3f);\n            }\n            if (codePoint <= 0xFFFF) { // BMP code point\n                result += String.fromCodePoint(codePoint);\n            } else if (codePoint <= 0x10FFFF) {\n                // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n                codePoint = codePoint - 0x10000;\n                result += String.fromCodePoint(\n                    (codePoint >> 10) + 0xD800,  // highSurrogate\n                    (codePoint & 0x3ff) + 0xDC00 // lowSurrogate\n                );\n            } else endPos = 0; // to fill it in with INVALIDs\n        }\n        for (; endPos < stringLen; endPos = endPos + 1) {\n            result += \"\\ufffd\"; // replacement character\n        }\n        return result;\n    }\n}\n"],"sourceRoot":"../../src"}