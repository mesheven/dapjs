{"version":3,"sources":["dap/enums.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;EAqBE","file":"enums.js","sourcesContent":["/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n/**\n * Debug Port Registers\n * http://infocenter.arm.com/help/topic/com.arm.doc.100230_0004_00_en/Chunk310569109.html#smr1439293850345\n */\nexport const enum DPRegister {\n    /**\n     * AP Abort register, write only\n     */\n    ABORT = 0x0,\n    /**\n     * Debug Port Identification register, read only\n     */\n    DPIDR = 0x0,\n    /**\n     * Control/Status register, SELECT.DPBANKSEL 0x0\n     */\n    CTRL_STAT = 0x4,\n    /**\n     * Data Link Control Register, SELECT.DPBANKSEL 0x1\n     */\n    DLCR = 0x4,\n    /**\n     * Read Resend register, read only\n     */\n    RESEND = 0x8,\n    /**\n     * AP Select register, write only\n     */\n    SELECT = 0x8,\n    /**\n     * Read Buffer register, read only\n     */\n    RDBUFF = 0xC,\n    // Version 2\n    /**\n     * Target Identification register, read only, SELECT.DPBANKSEL 0x2\n     */\n    TARGETID = 0x4,\n    /**\n     * Data Link Protocol Identification Register, read only, SELECT.DPBANKSEL 0x3\n     */\n    DLPIDR = 0x4,\n    /**\n     * Event Status register, read only, SELECT.DPBANKSEL 0x4\n     */\n    EVENTSTAT = 0x4,\n    /**\n     * Target Selection, write only\n     */\n    TARGETSEL = 0xC\n}\n\n/**\n * Access Port Registers\n * http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.100230_0004_00_en/smr1439293381481.html\n */\nexport const enum APRegister {\n    /**\n     * Control/Status Word register\n     */\n    CSW = 0x00,\n    /**\n     * Transfer Address Register\n     */\n    TAR = 0x04,\n    /**\n     * Data Read/Write register\n     */\n    DRW = 0x0C,\n    /**\n     * Banked Data register\n     */\n    BD0 = 0x10,\n    /**\n     * Banked Data register\n     */\n    BD1 = 0x14,\n    /**\n     * Banked Data register\n     */\n    BD2 = 0x18,\n    /**\n     * Banked Data register\n     */\n    BD3 = 0x1C,\n    /**\n     * Configuration register\n     */\n    CFG = 0xF4,\n    /**\n     * Debug Base Address register\n     */\n    ROM = 0xF8,\n    /**\n     * Identification Register\n     */\n    IDR = 0xFC\n}\n\n/**\n * Abort Register Mask\n * @hidden\n */\nexport const enum AbortMask {\n    /**\n     * Generates a DAP abort, that aborts the current AP transaction\n     */\n    DAPABORT = (1 << 0),\n    /**\n     * Reserved\n     */\n    STKCMPCLR = (1 << 1),\n    /**\n     * Sets the STICKYERR sticky error flag to 0\n     */\n    STKERRCLR = (1 << 2),\n    /**\n     * Sets the WDATAERR write data error flag to 0\n     */\n    WDERRCLR = (1 << 3),\n    /**\n     * Sets the STICKYORUN overrun error flag to 0\n     */\n    ORUNERRCLR = (1 << 4)\n}\n\n/**\n * Control/Status Register Mask\n * @hidden\n */\nexport const enum CtrlStatMask {\n    /**\n     * This bit is set to 1 to enable overrun detection. The reset value is 0\n     */\n    ORUNDETECT = (1 << 0),\n    /**\n     * This bit is set to 1 when an overrun occurs, read only\n     */\n    STICKYORUN = (1 << 1),\n    /**\n     * Reserved\n     */\n    STICKYCMP = (1 << 4),\n    /**\n     * If an error is returned by an access port transaction, this bit is set to 1, read only\n     */\n    STICKYERR = (1 << 5),\n    /**\n     * Whether the response to the previous access port read or RDBUFF read was OK, read only\n     */\n    READOK = (1 << 6),\n    /**\n     * If a Write Data Error occurs, read only\n     */\n    WDATAERR = (1 << 7),\n    /**\n     * Debug reset request, the reset value is 0\n     */\n    CDBGRSTREQ = (1 << 26),\n    /**\n     * Debug reset acknowledge, read only\n     */\n    CDBGRSTACK = (1 << 27),\n    /**\n     * Debug powerup request, the reset value is 0\n     */\n    CDBGPWRUPREQ = (1 << 28),\n    /**\n     * Debug powerup acknowledge, read only\n     */\n    CDBGPWRUPACK = (1 << 29),\n    /**\n     * System powerup request, the reset value is 0\n     */\n    CSYSPWRUPREQ = (1 << 30),\n    /**\n     * System powerup acknowledge, read only\n     */\n    CSYSPWRUPACK = (1 << 31)\n}\n\n/**\n * Control/Status Word Register Mask\n * http://infocenter.arm.com/help/topic/com.arm.doc.100165_0201_00_en/Chunk2061626261.html#ric1417175948266\n * @hidden\n */\nexport const enum CSWMask {\n    /**\n     * 8 bits\n     */\n    SIZE_8 = (0 << 0),\n    /**\n     * 16 bits\n     */\n    SIZE_16 = (1 << 0),\n    /**\n     * 32 bits\n     */\n    SIZE_32 = (1 << 1),\n    /**\n     * Auto address increment single\n     */\n    ADDRINC_SINGLE = (1 << 4),\n    /**\n     * Auto address increment packed\n     */\n    ADDRINC_PACKED = (1 << 5),\n    /**\n     * Indicates the status of the DAPEN port - AHB transfers permitted\n     */\n    DBGSTATUS = (1 << 6),\n    /**\n     * Indicates if a transfer is in progress\n     */\n    TRANSINPROG = (1 << 7),\n    /**\n     * Reserved\n     */\n    RESERVED = (1 << 24),\n    /**\n     * User and Privilege control\n     */\n    HPROT1 = (1 << 25),\n    /**\n     * Set to 1 for master type debug\n     */\n    MASTERTYPE = (1 << 29),\n    /**\n     * Common mask value\n     * @hidden\n     */\n    VALUE = ( ADDRINC_SINGLE | DBGSTATUS | RESERVED | HPROT1 | MASTERTYPE ),\n}\n\n/**\n * Debug Port Bank Select\n * @hidden\n */\nexport const enum DPBankSelect {\n    /**\n     * CTRL/STAT\n     */\n    CTRL_STAT = 0x00,\n    /**\n     * DLCR\n     */\n    DLCR = 0x01,\n    /**\n     * TARGETID\n     */\n    TARGETID = 0x02,\n    /**\n     * DLPIDR\n     */\n    DLPIDR = 0x03,\n    /**\n     * EVENTSTAT\n     */\n    EVENTSTAT = 0x04\n}\n\n/**\n * Bank Select Mask\n * @hidden\n */\nexport const enum BankSelectMask {\n    /**\n     * Selects the current access port\n     */\n    APSEL = 0xFF000000,\n    /**\n     * Selects the active 4-word register window on the current access port\n     */\n    APBANKSEL = 0x000000F0,\n    /**\n     * Selects the register that appears at DP register 0x4\n     */\n    DPBANKSEL = 0x0000000F\n}\n\n/**\n * Event Status Mask\n * @hidden\n */\nexport const enum EventStatMask {\n    /**\n     * Event status flag, indicates that the processor is halted when set to 0\n     */\n    EA = 0x01\n}\n"],"sourceRoot":"../../src"}