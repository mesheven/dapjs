{"version":3,"sources":["proxy/index.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;EAqBE;;AAmGF,yCAAuC;AAA9B,+BAAA,QAAQ,CAAA","file":"index.js","sourcesContent":["/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { DAPPort, DAPTransferMode } from \"./enums\";\n\n/**\n * CMSIS-DAP Transfer Operation\n */\nexport interface DAPOperation {\n    /**\n     * The register to use\n     */\n    register: number;\n    /**\n     * The read/write mode to use\n     */\n    mode: DAPTransferMode;\n    /**\n     * The port to use (Debug/Access)\n     */\n    port: DAPPort;\n    /**\n     * The (optional) value to write\n     */\n    value?: number;\n}\n\n/**\n * CMSIS Proxy interface\n */\nexport interface Proxy {\n    /**\n     * The maximum DAPOperations which can be transferred\n     */\n    operationCount: number;\n\n    /**\n     * The maximum block size which can be transferred\n     */\n    blockSize: number;\n\n    /**\n     * Connect to target device\n     * @returns Promise\n     */\n    connect(): Promise<void>;\n\n    /**\n     * Disconnect from target device\n     * @returns Promise\n     */\n    disconnect(): Promise<void>;\n\n    /**\n     * Reconnect to target device\n     * @returns Promise\n     */\n    reconnect(): Promise<void>;\n\n    /**\n     * Reset target device\n     * @returns Promise\n     */\n    reset(): Promise<boolean>;\n\n    /**\n     * Transfer data with a single read or write operation\n     * @param port Port type (debug port or access port)\n     * @param mode Whether to read or write\n     * @param register The register to use\n     * @param value Any value to write\n     * @returns Promise of any value read\n     */\n    transfer(port: DAPPort, mode: DAPTransferMode, register: number, value?: number): Promise<number>;\n\n    /**\n     * Transfer data with multiple read or write operations\n     * @param operations The operations to use\n     * @returns Promise of any values read\n     */\n    transfer(operations: DAPOperation[]): Promise<Uint32Array>;\n\n    /**\n     * Read a block of data from a single register\n     * @param port Port type (debug port or access port)\n     * @param register The register to use\n     * @returns Promise of values read\n     */\n    transferBlock(port: DAPPort, register: number, count: number): Promise<Uint32Array>;\n\n    /**\n     * Write a block of data to a single register\n     * @param port Port type (debug port or access port)\n     * @param register The register to use\n     * @param values The values to write\n     * @returns Promise\n     */\n    transferBlock(port: DAPPort, register: number, values: Uint32Array): Promise<void>;\n}\n\nexport { CmsisDAP } from \"./cmsis-dap\";\n"],"sourceRoot":"../../src"}