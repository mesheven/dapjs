{"version":3,"sources":["proxy/cmsis-dap.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;EAqBE;;;;;;;;;;;;AAEF,iCAAsC;AAetC;;GAEG;AACU,QAAA,uBAAuB,GAAG,QAAQ,CAAC;AAChD;;GAEG;AACH,IAAM,YAAY,GAAG,MAAM,CAAC;AAC5B;;GAEG;AACH,IAAM,aAAa,GAAG,MAAM,CAAC;AAE7B;;GAEG;AACH,IAAM,iBAAiB,GAAG,CAAC,CAAC;AAC5B;;GAEG;AACH,IAAM,oBAAoB,GAAG,CAAC,CAAC;AAC/B;;GAEG;AACH,IAAM,uBAAuB,GAAG,CAAC,CAAC;AAElC;;;GAGG;AACH;IAA8B,4BAAY;IAYtC;;;;;OAKG;IACH,kBAAoB,SAAoB,EAAU,IAAuC,EAAU,cAAgD;QAAjG,qBAAA,EAAA,sBAAuC;QAAU,+BAAA,EAAA,iBAAyB,+BAAuB;QAAnJ,YACI,iBAAO,SAQV;QATmB,eAAS,GAAT,SAAS,CAAW;QAAU,UAAI,GAAJ,IAAI,CAAmC;QAAU,oBAAc,GAAd,cAAc,CAAkC;QAG/I,2BAA2B;QAC3B,KAAI,CAAC,SAAS,GAAG,KAAI,CAAC,SAAS,CAAC,UAAU,GAAG,iBAAiB,GAAG,CAAC,CAAC,CAAC,wCAAwC;QAE5G,yCAAyC;QACzC,IAAM,cAAc,GAAG,KAAI,CAAC,SAAS,CAAC,UAAU,GAAG,oBAAoB,GAAG,CAAC,CAAC,CAAC,kCAAkC;QAC/G,KAAI,CAAC,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,GAAG,uBAAuB,CAAC,CAAC;;IAC/E,CAAC;IAEO,wBAAK,GAAb,UAAc,OAAe;QACzB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,OAAO;YAChC,UAAU,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,2CAAwB,GAAhC,UAAiC,MAAc,EAAE,IAAmB;QAEhE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACR,MAAM,CAAC,IAAI,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACpC,CAAC;QAED,gBAAgB,MAAqC;YACjD,MAAM,CAAE,MAA0B,CAAC,MAAM,KAAK,SAAS,CAAC;QAC5D,CAAC;QAED,IAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;QACtD,IAAM,MAAM,GAAG,IAAI,UAAU,CAAC,WAAW,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;QAE1D,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACrB,MAAM,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;QAE3C,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAED;;;OAGG;IACO,iCAAc,GAAxB,UAAyB,QAAqB;QAA9C,iBAOC;QANG,IAAM,QAAQ,GAAG,QAAQ,iBAAqB,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,YAAY,CAAC;QAE9E,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,UAAU,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,kBAAkB;aACrG,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,WAAW,CAAC,IAAI,WAAW,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAA7C,CAA6C,CAAC,CAAC,yBAAyB;aACnF,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,WAAW,CAAC,IAAI,UAAU,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,EAA5E,CAA4E,CAAC,CAAC,kBAAkB;aAC3G,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,WAAW,CAAC,IAAI,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAxC,CAAwC,CAAC,CAAC;IAC1D,CAAC;IAED;;;;;OAKG;IACO,8BAAW,GAArB,UAAsB,QAAsB;QACxC,IAAM,SAAS,GAAG,QAAQ,CAAC,UAAU,GAAG,CAAC,CAAC;QAC1C,IAAM,IAAI,GAAG,IAAI,CAAC,wBAAwB,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QAEhE,MAAM,CAAC,IAAI,CAAC,IAAI,4BAA8B,IAAI,CAAC;aAClD,IAAI,CAAC,cAAM,OAAA,SAAS,EAAT,CAAS,CAAC,CAAC;IAC3B,CAAC;IAED;;;;;;;OAOG;IACO,oCAAiB,GAA3B,UAA4B,UAAkB,EAAE,SAAiB,EAAE,UAAkB;QACjF,IAAM,IAAI,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC;QAC/B,IAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAEvC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;QAC7B,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;QACnC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;QAEpC,MAAM,CAAC,IAAI,CAAC,IAAI,iCAAoC,IAAI,CAAC;aACxD,IAAI,CAAC,cAAM,OAAA,SAAS,EAAT,CAAS,CAAC,CAAC;IAC3B,CAAC;IAED;;;;;OAKG;IACO,uBAAI,GAAd,UAAe,OAAe,EAAE,IAAmB;QAAnD,iBAgCC;QA/BG,IAAM,KAAK,GAAG,IAAI,CAAC,wBAAwB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAE3D,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC;aACjC,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,SAAS,CAAC,IAAI,EAAE,EAArB,CAAqB,CAAC;aACjC,IAAI,CAAC,UAAA,QAAQ;YACV,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC,CAAC,CAAC;gBACnC,MAAM,IAAI,KAAK,CAAC,sBAAoB,OAAO,YAAO,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAG,CAAC,CAAC;YAC9E,CAAC;YAED,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACd,4BAA+B;gBAC/B,6BAAgC;gBAChC,uBAA0B;gBAC1B,+BAAiC;gBACjC,4BAA8B;gBAC9B,+BAAiC;gBACjC,gCAAkC;gBAClC,+BAAiC;gBACjC,gCAAkC;gBAClC,2BAA6B;gBAC7B,8BAAgC;gBAChC,iCAAmC;gBACnC,+BAAiC;gBACjC;oBACI,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,mBAAuB,CAAC,CAAC,CAAC;wBAC9C,MAAM,IAAI,KAAK,CAAC,oBAAkB,OAAO,YAAO,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAG,CAAC,CAAC;oBAC5E,CAAC;YACT,CAAC;YAED,MAAM,CAAC,QAAQ,CAAC;QACpB,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;OAGG;IACI,0BAAO,GAAd;QAAA,iBAWC;QAVG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE;aAC3B,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,IAAI,yBAA2B,IAAI,WAAW,CAAC,CAAC,KAAI,CAAC,cAAc,CAAC,CAAC,CAAC,EAA3E,CAA2E,CAAC;aACvF,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,IAAI,sBAAyB,IAAI,UAAU,CAAC,CAAC,KAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAA9D,CAA8D,CAAC;aAC1E,IAAI,CAAC,UAAA,MAAM;YACR,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,mBAA8B,IAAI,KAAI,CAAC,IAAI,oBAAwB,IAAI,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,KAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC5H,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;YACzC,CAAC;QACL,CAAC,CAAC;aACD,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,iBAAiB,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,EAAjC,CAAiC,CAAC;aAC7C,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,cAAc,aAAiB,EAApC,CAAoC,CAAC,CAAC;IACtD,CAAC;IAED;;;OAGG;IACI,6BAAU,GAAjB;QAAA,iBAKC;QAJG,MAAM,CAAC,IAAI,CAAC,IAAI,wBAA2B;aAC1C,IAAI,CAAC;YACF,MAAM,CAAC,KAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;QAClC,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;OAGG;IACI,4BAAS,GAAhB;QAAA,iBAIC;QAHG,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE;aACvB,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAf,CAAe,CAAC;aAC3B,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,OAAO,EAAE,EAAd,CAAc,CAAC,CAAC;IAChC,CAAC;IAED;;;OAGG;IACI,wBAAK,GAAZ;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,2BAA6B;aAC5C,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,2BAAyC,EAA7D,CAA6D,CAAC,CAAC;IACrF,CAAC;IAED;;;;OAIG;IACI,0BAAO,GAAd,UAAe,OAAuB;QAClC,MAAM,CAAC,IAAI,CAAC,IAAI,mBAAsB,IAAI,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;aAC/D,IAAI,CAAC,UAAA,MAAM;YACR,IAAM,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAElC,EAAE,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBACf,MAAM,CAAC,IAAI,CAAC;YAChB,CAAC;YAED,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACd,4BAAiC;gBACjC,4BAAiC;gBACjC,2BAAgC;gBAChC;oBACI,OAAO;oBACP,EAAE,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC;wBAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;oBAE5C,QAAQ;oBACR,EAAE,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC;wBAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;oBAE7C,OAAO;oBACP,EAAE,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC;wBAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACrD,CAAC;YAED,IAAM,KAAK,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;YACvD,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACP,CAAC;IAiBM,2BAAQ,GAAf,UAAgB,SAAmC,EAAE,IAAsB,EAAE,QAAiB,EAAE,KAAc;QAE1G,IAAI,UAA0B,CAAC;QAE/B,EAAE,CAAC,CAAC,OAAO,SAAS,KAAK,QAAQ,CAAC,CAAC,CAAC;YAChC,UAAU,GAAG,CAAC;oBACV,IAAI,EAAE,SAAS;oBACf,IAAI,MAAA;oBACJ,QAAQ,UAAA;oBACR,KAAK,OAAA;iBACR,CAAC,CAAC;QACP,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,UAAU,GAAG,SAAS,CAAC;QAC3B,CAAC;QAED,IAAM,IAAI,GAAG,IAAI,UAAU,CAAC,oBAAoB,GAAG,CAAC,UAAU,CAAC,MAAM,GAAG,uBAAuB,CAAC,CAAC,CAAC;QAClG,IAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAEvC,6BAA6B;QAC7B,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACpB,iBAAiB;QACjB,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;QAEpC,UAAU,CAAC,OAAO,CAAC,UAAC,SAAS,EAAE,KAAK;YAChC,IAAM,MAAM,GAAG,oBAAoB,GAAG,CAAC,KAAK,GAAG,uBAAuB,CAAC,CAAC;YAExE,mBAAmB;YACnB,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,SAAS,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC;YAC5E,gBAAgB;YAChB,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,uBAA0B,IAAI,CAAC;aAC9C,IAAI,CAAC,UAAA,MAAM;YAER,iBAAiB;YACjB,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC3C,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;YAC/C,CAAC;YAED,oBAAoB;YACpB,IAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACpC,EAAE,CAAC,CAAC,QAAQ,iBAA6B,CAAC,CAAC,CAAC;gBACxC,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;YAC9C,CAAC;YACD,EAAE,CAAC,CAAC,QAAQ,kBAA8B,CAAC,CAAC,CAAC;gBACzC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;YAC/C,CAAC;YACD,EAAE,CAAC,CAAC,QAAQ,2BAAuC,CAAC,CAAC,CAAC;gBAClD,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;YACxD,CAAC;YACD,EAAE,CAAC,CAAC,QAAQ,4BAAuC,CAAC,CAAC,CAAC;gBAClD,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;YACxD,CAAC;YACD,EAAE,CAAC,CAAC,QAAQ,mBAA+B,CAAC,CAAC,CAAC;gBAC1C,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;YAChD,CAAC;YAED,EAAE,CAAC,CAAC,OAAO,SAAS,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YACrC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAM,QAAM,GAAG,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;gBACrC,MAAM,CAAC,IAAI,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,QAAM,CAAC,CAAC,CAAC;YAC/D,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAiBM,gCAAa,GAApB,UAAqB,IAAa,EAAE,QAAgB,EAAE,aAAmC;QAErF,IAAI,cAAsB,CAAC;QAC3B,IAAI,IAAqB,CAAC;QAC1B,IAAI,QAAQ,GAAG,iBAAiB,CAAC;QAEjC,EAAE,CAAC,CAAC,OAAO,aAAa,KAAK,QAAQ,CAAC,CAAC,CAAC;YACpC,cAAc,GAAG,aAAa,CAAC;YAC/B,IAAI,eAAuB,CAAC;QAChC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,cAAc,GAAG,aAAa,CAAC,MAAM,CAAC;YACtC,IAAI,gBAAwB,CAAC;YAC7B,QAAQ,IAAI,aAAa,CAAC,UAAU,CAAC;QACzC,CAAC;QAED,IAAM,IAAI,GAAG,IAAI,UAAU,CAAC,QAAQ,CAAC,CAAC;QACtC,IAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAEvC,6BAA6B;QAC7B,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACpB,iBAAiB;QACjB,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,cAAc,EAAE,IAAI,CAAC,CAAC;QACxC,mBAAmB;QACnB,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,GAAG,IAAI,GAAG,QAAQ,CAAC,CAAC;QAEzC,EAAE,CAAC,CAAC,OAAO,aAAa,KAAK,QAAQ,CAAC,CAAC,CAAC;YACpC,gBAAgB;YAChB,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,iBAAiB,CAAC,CAAC;QAC/C,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,IAAI,6BAAgC,IAAI,CAAC;aACpD,IAAI,CAAC,UAAA,MAAM;YAER,iBAAiB;YACjB,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,cAAc,CAAC,CAAC,CAAC;gBAC/C,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;YAC/C,CAAC;YAED,oBAAoB;YACpB,IAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACpC,EAAE,CAAC,CAAC,QAAQ,eAA2B,CAAC,CAAC,CAAC;gBACtC,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;YAC9C,CAAC;YACD,EAAE,CAAC,CAAC,QAAQ,gBAA4B,CAAC,CAAC,CAAC;gBACvC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;YAC/C,CAAC;YACD,EAAE,CAAC,CAAC,QAAQ,yBAAqC,CAAC,CAAC,CAAC;gBAChD,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;YACxD,CAAC;YACD,EAAE,CAAC,CAAC,QAAQ,iBAA6B,CAAC,CAAC,CAAC;gBACxC,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;YAChD,CAAC;YAED,EAAE,CAAC,CAAC,OAAO,aAAa,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACpC,MAAM,CAAC,IAAI,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACnD,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IACL,eAAC;AAAD,CAzXA,AAyXC,CAzX6B,qBAAY,GAyXzC;AAzXY,4BAAQ","file":"cmsis-dap.js","sourcesContent":["/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventEmitter } from \"events\";\nimport { Transport } from \"../transport\";\nimport {\n    DAPPort,\n    DAPTransferMode,\n    DAPProtocol,\n    DAPCommand,\n    DAPConnectResponse,\n    DAPResponse,\n    DAPInfoRequest,\n    DAPResetTargeResponse,\n    DAPTransferResponse\n} from \"./enums\";\nimport { Proxy, DAPOperation } from \"./\";\n\n/**\n * @hidden\n */\nexport const DEFAULT_CLOCK_FREQUENCY = 10000000;\n/**\n * @hidden\n */\nconst SWD_SEQUENCE = 0xE79E;\n/**\n * @hidden\n */\nconst JTAG_SEQUENCE = 0xE73C;\n\n/**\n * @hidden\n */\nconst BLOCK_HEADER_SIZE = 4;\n/**\n * @hidden\n */\nconst TRANSFER_HEADER_SIZE = 2;\n/**\n * @hidden\n */\nconst TRANSFER_OPERATION_SIZE = 5;\n\n/**\n * CMSIS-DAP class\n * https://www.keil.com/pack/doc/CMSIS/DAP/html/group__DAP__Commands__gr.html\n */\nexport class CmsisDAP extends EventEmitter implements Proxy {\n\n    /**\n     * The maximum DAPOperations which can be transferred\n     */\n    public operationCount: number;\n\n    /**\n     * The maximum block size which can be transferred\n     */\n    public blockSize: number;\n\n    /**\n     * CMSIS-DAP constructor\n     * @param transport Debug transport to use\n     * @param mode Debug mode to use\n     * @param clockFrequency Communication clock frequency to use (default 10000000)\n     */\n    constructor(private transport: Transport, private mode: DAPProtocol = DAPProtocol.DEFAULT, private clockFrequency: number = DEFAULT_CLOCK_FREQUENCY) {\n        super();\n\n        // Determine the block size\n        this.blockSize = this.transport.packetSize - BLOCK_HEADER_SIZE - 1; // -1 for the DAP_TRANSFER_BLOCK command\n\n        // Determine the operation count possible\n        const operationSpace = this.transport.packetSize - TRANSFER_HEADER_SIZE - 1; // -1 for the DAP_TRANSFER command\n        this.operationCount = Math.floor(operationSpace / TRANSFER_OPERATION_SIZE);\n    }\n\n    private delay(timeout: number): Promise<void> {\n        return new Promise((resolve, _reject) => {\n            setTimeout(resolve, timeout);\n        });\n    }\n\n    private bufferSourceToUint8Array(prefix: number, data?: BufferSource): Uint8Array {\n\n        if (!data) {\n            return new Uint8Array([prefix]);\n        }\n\n        function isView(source: ArrayBuffer | ArrayBufferView): source is ArrayBufferView {\n            return (source as ArrayBufferView).buffer !== undefined;\n        }\n\n        const arrayBuffer = isView(data) ? data.buffer : data;\n        const result = new Uint8Array(arrayBuffer.byteLength + 1);\n\n        result.set([prefix]);\n        result.set(new Uint8Array(arrayBuffer), 1);\n\n        return result;\n    }\n\n    /**\n     * Switches the CMSIS-DAP unit to use SWD\n     * http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0316d/Chdhfbhc.html\n     */\n    protected selectProtocol(protocol: DAPProtocol): Promise<void> {\n        const sequence = protocol === DAPProtocol.JTAG ? JTAG_SEQUENCE : SWD_SEQUENCE;\n\n        return this.swjSequence(new Uint8Array([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF])) // Sequence of 1's\n        .then(() => this.swjSequence(new Uint16Array([sequence]))) // Send protocol sequence\n        .then(() => this.swjSequence(new Uint8Array([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]))) // Sequence of 1's\n        .then(() => this.swjSequence(new Uint8Array([0x00])));\n    }\n\n    /**\n     * Send an SWJ Sequence\n     * https://www.keil.com/pack/doc/CMSIS/DAP/html/group__DAP__SWJ__Sequence.html\n     * @param sequence The sequence to send\n     * @returns Promise\n     */\n    protected swjSequence(sequence: BufferSource): Promise<void> {\n        const bitLength = sequence.byteLength * 8;\n        const data = this.bufferSourceToUint8Array(bitLength, sequence);\n\n        return this.send(DAPCommand.DAP_SWJ_SEQUENCE, data)\n        .then(() => undefined);\n    }\n\n    /**\n     * Configure Transfer\n     * https://www.keil.com/pack/doc/CMSIS/DAP/html/group__DAP__TransferConfigure.html\n     * @param idleCycles Number of extra idle cycles after each transfer\n     * @param waitRetry Number of transfer retries after WAIT response\n     * @param matchRetry Number of retries on reads with Value Match in DAP_Transfer\n     * @returns Promise\n     */\n    protected configureTransfer(idleCycles: number, waitRetry: number, matchRetry: number): Promise<void> {\n        const data = new Uint8Array(5);\n        const view = new DataView(data.buffer);\n\n        view.setUint8(0, idleCycles);\n        view.setUint16(1, waitRetry, true);\n        view.setUint16(3, matchRetry, true);\n\n        return this.send(DAPCommand.DAP_TRANSFER_CONFIGURE, data)\n        .then(() => undefined);\n    }\n\n    /**\n     * Send a command\n     * @param command Command to send\n     * @param data Data to use\n     * @returns Promise of DataView\n     */\n    protected send(command: number, data?: BufferSource): Promise<DataView> {\n        const array = this.bufferSourceToUint8Array(command, data);\n\n        return this.transport.write(array)\n        .then(() => this.transport.read())\n        .then(response => {\n            if (response.getUint8(0) !== command) {\n                throw new Error(`Bad response for ${command} -> ${response.getUint8(0)}`);\n            }\n\n            switch (command) {\n                case DAPCommand.DAP_DISCONNECT:\n                case DAPCommand.DAP_WRITE_ABORT:\n                case DAPCommand.DAP_DELAY:\n                case DAPCommand.DAP_RESET_TARGET:\n                case DAPCommand.DAP_SWJ_CLOCK:\n                case DAPCommand.DAP_SWJ_SEQUENCE:\n                case DAPCommand.DAP_SWD_CONFIGURE:\n                case DAPCommand.DAP_SWD_SEQUENCE:\n                case DAPCommand.DAP_SWO_TRANSPORT:\n                case DAPCommand.DAP_SWO_MODE:\n                case DAPCommand.DAP_SWO_CONTROL:\n                case DAPCommand.DAP_JTAG_CONFIGURE:\n                case DAPCommand.DAP_JTAG_ID_CODE:\n                case DAPCommand.DAP_TRANSFER_CONFIGURE:\n                    if (response.getUint8(1) !== DAPResponse.DAP_OK) {\n                        throw new Error(`Bad status for ${command} -> ${response.getUint8(1)}`);\n                    }\n            }\n\n            return response;\n        });\n    }\n\n    /**\n     * Connect to target device\n     * @returns Promise\n     */\n    public connect(): Promise<void> {\n        return this.transport.open()\n        .then(() => this.send(DAPCommand.DAP_SWJ_CLOCK, new Uint32Array([this.clockFrequency])))\n        .then(() => this.send(DAPCommand.DAP_CONNECT, new Uint8Array([this.mode])))\n        .then(result => {\n            if (result.getUint8(1) === DAPConnectResponse.FAILED || this.mode !== DAPProtocol.DEFAULT && result.getUint8(1) !== this.mode) {\n                throw new Error(\"Mode not enabled.\");\n            }\n        })\n        .then(() => this.configureTransfer(0, 100, 0))\n        .then(() => this.selectProtocol(DAPProtocol.SWD));\n    }\n\n    /**\n     * Disconnect from target device\n     * @returns Promise\n     */\n    public disconnect(): Promise<void> {\n        return this.send(DAPCommand.DAP_DISCONNECT)\n        .then(() => {\n            return this.transport.close();\n        });\n    }\n\n    /**\n     * Reconnect to target device\n     * @returns Promise\n     */\n    public reconnect(): Promise<void> {\n        return this.disconnect()\n        .then(() => this.delay(100))\n        .then(() => this.connect());\n    }\n\n    /**\n     * Reset target device\n     * @returns Promise of whether a device specific reset sequence is implemented\n     */\n    public reset(): Promise<boolean> {\n        return this.send(DAPCommand.DAP_RESET_TARGET)\n        .then(response => response.getUint8(2) === DAPResetTargeResponse.RESET_SEQUENCE);\n    }\n\n    /**\n     * Get DAP information\n     * @param request Type of information to get\n     * @returns Promise of DataView\n     */\n    public dapInfo(request: DAPInfoRequest): Promise<number | string> {\n        return this.send(DAPCommand.DAP_INFO, new Uint8Array([request]))\n        .then(result => {\n            const length = result.getUint8(1);\n\n            if (length === 0) {\n                return null;\n            }\n\n            switch (request) {\n                case DAPInfoRequest.CAPABILITIES:\n                case DAPInfoRequest.PACKET_COUNT:\n                case DAPInfoRequest.PACKET_SIZE:\n                case DAPInfoRequest.SWO_TRACE_BUFFER_SIZE:\n                    // Byte\n                    if (length === 1) return result.getUint8(2);\n\n                    // Short\n                    if (length === 2) return result.getUint16(2);\n\n                    // Word\n                    if (length === 4) return result.getUint32(2);\n            }\n\n            const ascii = new Uint8Array(result.buffer, 2, length);\n            return String.fromCharCode.apply(null, ascii);\n        });\n    }\n\n    /**\n     * Transfer data with a single read or write operation\n     * @param port Port type (debug port or access port)\n     * @param mode Whether to read or write\n     * @param register The register to use\n     * @param value Any value to write\n     * @returns Promise of any value read\n     */\n    public transfer(port: DAPPort, mode: DAPTransferMode, register: number, value?: number): Promise<number>;\n    /**\n     * Transfer data with multiple read or write operations\n     * @param operations The operations to use\n     * @returns Promise of any values read\n     */\n    public transfer(operations: DAPOperation[]): Promise<Uint32Array>;\n    public transfer(portOrOps: DAPPort | DAPOperation[], mode?: DAPTransferMode, register?: number, value?: number): Promise<number | Uint32Array> {\n\n        let operations: DAPOperation[];\n\n        if (typeof portOrOps === \"number\") {\n            operations = [{\n                port: portOrOps,\n                mode,\n                register,\n                value\n            }];\n        } else {\n            operations = portOrOps;\n        }\n\n        const data = new Uint8Array(TRANSFER_HEADER_SIZE + (operations.length * TRANSFER_OPERATION_SIZE));\n        const view = new DataView(data.buffer);\n\n        // DAP Index, ignored for SWD\n        view.setUint8(0, 0);\n        // Transfer count\n        view.setUint8(1, operations.length);\n\n        operations.forEach((operation, index) => {\n            const offset = TRANSFER_HEADER_SIZE + (index * TRANSFER_OPERATION_SIZE);\n\n            // Transfer request\n            view.setUint8(offset, operation.port | operation.mode | operation.register);\n            // Transfer data\n            view.setUint32(offset + 1, operation.value, true);\n        });\n\n        return this.send(DAPCommand.DAP_TRANSFER, data)\n        .then(result => {\n\n            // Transfer count\n            if (result.getUint8(1) !== operations.length) {\n                throw new Error(\"Transfer count mismatch\");\n            }\n\n            // Transfer response\n            const response = result.getUint8(2);\n            if (response === DAPTransferResponse.WAIT) {\n                throw new Error(\"Transfer response WAIT\");\n            }\n            if (response === DAPTransferResponse.FAULT) {\n                throw new Error(\"Transfer response FAULT\");\n            }\n            if (response === DAPTransferResponse.PROTOCOL_ERROR) {\n                throw new Error(\"Transfer response PROTOCOL_ERROR\");\n            }\n            if (response === DAPTransferResponse.VALUE_MISMATCH) {\n                throw new Error(\"Transfer response VALUE_MISMATCH\");\n            }\n            if (response === DAPTransferResponse.NO_ACK) {\n                throw new Error(\"Transfer response NO_ACK\");\n            }\n\n            if (typeof portOrOps === \"number\") {\n                return result.getUint32(3, true);\n            } else {\n                const length = operations.length * 4;\n                return new Uint32Array(result.buffer.slice(3, 3 + length));\n            }\n        });\n    }\n\n    /**\n     * Read a block of data from a single register\n     * @param port Port type (debug port or access port)\n     * @param register The register to use\n     * @returns Promise of values read\n     */\n    public transferBlock(port: DAPPort, register: number, count: number): Promise<Uint32Array>;\n    /**\n     * Write a block of data to a single register\n     * @param port Port type (debug port or access port)\n     * @param register The register to use\n     * @param values The values to write\n     * @returns Promise\n     */\n    public transferBlock(port: DAPPort, register: number, values: Uint32Array): Promise<void>;\n    public transferBlock(port: DAPPort, register: number, countOrValues: number | Uint32Array): Promise<Uint32Array | void> {\n\n        let operationCount: number;\n        let mode: DAPTransferMode;\n        let dataSize = BLOCK_HEADER_SIZE;\n\n        if (typeof countOrValues === \"number\") {\n            operationCount = countOrValues;\n            mode = DAPTransferMode.READ;\n        } else {\n            operationCount = countOrValues.length;\n            mode = DAPTransferMode.WRITE;\n            dataSize += countOrValues.byteLength;\n        }\n\n        const data = new Uint8Array(dataSize);\n        const view = new DataView(data.buffer);\n\n        // DAP Index, ignored for SWD\n        view.setUint8(0, 0);\n        // Transfer count\n        view.setUint16(1, operationCount, true);\n        // Transfer request\n        view.setUint8(3, port | mode | register);\n\n        if (typeof countOrValues !== \"number\") {\n            // Transfer data\n            data.set(countOrValues, BLOCK_HEADER_SIZE);\n        }\n\n        return this.send(DAPCommand.DAP_TRANSFER_BLOCK, view)\n        .then(result => {\n\n            // Transfer count\n            if (result.getUint16(1, true) !== operationCount) {\n                throw new Error(\"Transfer count mismatch\");\n            }\n\n            // Transfer response\n            const response = result.getUint8(3);\n            if (response & DAPTransferResponse.WAIT) {\n                throw new Error(\"Transfer response WAIT\");\n            }\n            if (response & DAPTransferResponse.FAULT) {\n                throw new Error(\"Transfer response FAULT\");\n            }\n            if (response & DAPTransferResponse.PROTOCOL_ERROR) {\n                throw new Error(\"Transfer response PROTOCOL_ERROR\");\n            }\n            if (response & DAPTransferResponse.NO_ACK) {\n                throw new Error(\"Transfer response NO_ACK\");\n            }\n\n            if (typeof countOrValues === \"number\") {\n                return new Uint32Array(result.buffer.slice(4));\n            }\n        });\n    }\n}\n"],"sourceRoot":"../../src"}